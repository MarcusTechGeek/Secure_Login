@page "/"
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.Authorization
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using System.Text
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@using Microsoft.IdentityModel.Tokens;
@inject Microsoft.JSInterop.IJSRuntime JSRuntime


@if (!string.IsNullOrEmpty(decodedToken))
{// Display decoded JWT token if available or show a loading message.
    <h3>JWT Token (Decoded):</h3>
    <pre>@decodedToken</pre>
    <button class="btn btn-primary" @onclick="Logout">Logout</button>
}
else
{
    <p>Please log in. Loading...</p>
}

@code {
    private string? decodedToken;

    // This method is called after the component has rendered.
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Retrieve the JWT token from session storage using JavaScript interop.
            var token = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "jwt");

            // Decode the retrieved token.
            decodedToken = DecodeToken(token);
            StateHasChanged(); // Notify the component that the state has changed
        }
    }

    // Decode the JWT token.
    private string? DecodeToken(string? token)
    {
        if (string.IsNullOrEmpty(token))
            return null;

        var tokenHandler = new JwtSecurityTokenHandler();
        var key = Encoding.UTF8.GetBytes(Configuration["JwtSettings:SecretKey"] ?? string.Empty);

        try
        {
            // Validate and decode the token.
            tokenHandler.ValidateToken(token, new TokenValidationParameters
            {
                ValidateIssuerSigningKey = true,
                IssuerSigningKey = new SymmetricSecurityKey(key),
                ValidateIssuer = true,
                ValidIssuer = Configuration["JwtSettings:Issuer"],
                ValidateAudience = true,
                ValidAudience = Configuration["JwtSettings:Audience"],
                ClockSkew = TimeSpan.Zero
            }, out SecurityToken validatedToken);

            var jwtToken = (JwtSecurityToken)validatedToken;
            var claims = jwtToken.Claims.ToDictionary(c => c.Type, c => c.Value);
            var decodedToken = $"Subject: {claims[JwtRegisteredClaimNames.Sub]}\nJTI: {claims[JwtRegisteredClaimNames.Jti]}";

            return decodedToken;
        }
        catch
        {
            return null;
        }
    }

    // Logout method clears the JWT token from session storage and navigates to the logout page.
    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "jwt"); // Clear the JWT token
        NavigationManager.NavigateTo("/logout", true); 
    }
}
