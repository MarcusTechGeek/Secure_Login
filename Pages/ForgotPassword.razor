@page "/forgotpassword"
@using SecureLogin.Services
@using SecureLogin.Data
@using Microsoft.EntityFrameworkCore
@using System.Net.Http
@using System.Text
@using System.Web
@using System.Threading.Tasks
@using Microsoft.Extensions.Configuration
@inject ApplicationDbContext _context            // Injecting the ApplicationDbContext for database interaction
@inject IConfiguration configuration             // Injecting the IConfiguration for accessing configuration settings
@inject NavigationManager navigationManager      // Injecting NavigationManager for managing navigation within the application
@using Microsoft.Extensions.Logging;             // Importing Microsoft.Extensions.Logging for logging functionality

<h3>Forgot Password</h3>

@if (showSuccess)
{
    <div class="alert alert-success" role="alert">
        A password reset link has been sent to your email address. Please check your inbox and follow the instructions to reset your password.
    </div>
}

<EditForm Model="@forgotPasswordModel" OnValidSubmit="HandleForgotPassword">
    <DataAnnotationsValidator />                // Adding DataAnnotationsValidator for client-side validation
    <ValidationSummary />                       // Adding ValidationSummary for displaying validation errors
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="forgotPasswordModel.Email" />    // Binding email input to model
    </div>
    <button type="submit" class="btn btn-primary">Reset Password</button>   // Button to trigger password reset
</EditForm>

@code {
    private ForgotPasswordModel forgotPasswordModel = new ForgotPasswordModel();    // Creating an instance of ForgotPasswordModel to store email
    private bool showSuccess = false;                 // Flag to indicate whether the password reset was successful

    [Inject]
    private ILogger<ForgotPassword> Logger { get; set; }    // Injecting ILogger for logging within the ForgotPassword component

    private async Task HandleForgotPassword()
    {
        try
        {
            // Check if the email exists in the database
            var user = await _context.Users.FirstOrDefaultAsync(u => u.Email == forgotPasswordModel.Email);
            if (user != null)
            {
                // Generate a password reset token
                var resetToken = Guid.NewGuid().ToString();

                // Store the password reset token in the database
                // (You'll need to add a new property to the User model to store the reset token and a timestamp)
                user.PasswordResetToken = resetToken;   // Storing the password reset token in the user model
                user.PasswordResetTokenExpiration = DateTime.UtcNow.AddHours(1); // Setting expiration time for the reset token
                await _context.SaveChangesAsync();     // Saving changes to the database

                // Send an email with the password reset link
                var resetLink = $"{navigationManager.BaseUri}resetpassword?token={resetToken}";   // Constructing the reset password link
                var formspreeEndpoint = configuration["FormspreeEndpoint"];   // Getting the Formspree endpoint from configuration

                // Send the email with the reset link using Formspree
                using (var httpClient = new HttpClient())
                {
                    var formData = new FormUrlEncodedContent(new[]
                    {
                        new KeyValuePair<string, string>("subject", "Password Reset"),  // Setting email subject
                        new KeyValuePair<string, string>("message", $"Click the following link to reset your password: {resetLink}"),  // Setting email message with reset link
                        new KeyValuePair<string, string>("email", forgotPasswordModel.Email)  // Setting recipient email
                    });

                    var response = await httpClient.PostAsync(formspreeEndpoint, formData);  // Sending the email
                    response.EnsureSuccessStatusCode();    // Ensuring the email was sent successfully
                }

                showSuccess = true;   // Setting flag to indicate success
            }
            else
            {
                // Log a message if the user is not found
                Logger.LogError("User with email {Email} not found.", forgotPasswordModel.Email);
            }
        }
        catch (Exception ex)
        {
            // Log any exceptions that occur during password reset handling
            Logger.LogError(ex, "An error occurred while handling password reset.");
        }
    }

    public class ForgotPasswordModel
    {
        public string? Email { get; set; }   // Property to store user's email for password reset
    }
}
