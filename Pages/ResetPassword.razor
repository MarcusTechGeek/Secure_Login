@page "/resetpassword"
@using SecureLogin.Services
@using SecureLogin.Data
@inject ApplicationDbContext _context
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore;
@using BCrypt.Net;
@using System.ComponentModel.DataAnnotations

<h3>Reset Password</h3>

@if (showSuccess)
{
    <div class="alert alert-success" role="alert">
        Your password has been reset successfully. You can now log in with your new password.
    </div>
}
else if (showError)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<EditForm Model="@resetPasswordModel" OnValidSubmit="HandleResetPassword">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="newPassword">New Password</label>
        <InputText id="newPassword" type="password" class="form-control" @bind-Value="resetPasswordModel.NewPassword" />
    </div>

    <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="resetPasswordModel.ConfirmPassword" />
    </div>

    <button type="submit" class="btn btn-primary">Reset Password</button>
</EditForm>

@code {
    private ResetPasswordModel resetPasswordModel = new ResetPasswordModel();
    private bool showSuccess = false;
    private bool showError = false;
    private string errorMessage = string.Empty;

    [Parameter]
    public string? Token { get; set; }

    private async Task HandleResetPassword()
    {
        // Verify the password reset token
        var user = await _context.Users.FirstOrDefaultAsync(u => u.PasswordResetToken == Token && u.PasswordResetTokenExpiration > DateTime.UtcNow.AddMinutes(-5));
        if (user != null)
        {
            // Reset the user's password
            string hashedPassword = BCrypt.HashPassword(resetPasswordModel.NewPassword);
            user.PasswordHash = hashedPassword;
            user.PasswordResetToken = null;
            user.PasswordResetTokenExpiration = null;
            await _context.SaveChangesAsync();

            showSuccess = true;
            showError = false;

            // Redirect to the login page or another appropriate page
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            showSuccess = false;
            showError = true;
            errorMessage = "Invalid or expired password reset token. Please request a new password reset.";
        }
    }

    public class ResetPasswordModel
    {
        [Required(ErrorMessage = "New password is required.")]
        [StringLength(8, ErrorMessage = "New password must be at least 8 characters long.")]
        public string? NewPassword { get; set; }

        [Required(ErrorMessage = "Confirm password is required.")]
        [Compare("NewPassword", ErrorMessage = "Passwords do not match.")]
        public string? ConfirmPassword { get; set; }
    }
}