@page "/resetpassword"
@using SecureLogin.Services
@using SecureLogin.Data
@inject ApplicationDbContext _context
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore;
@using BCrypt.Net;
@using System.ComponentModel.DataAnnotations

<h3>Reset Password</h3>


@if (showSuccess)
{// Display success message if password reset is successful.
    <div class="alert alert-success" role="alert">
        Your password has been reset successfully. You can now log in with your new password.
    </div>
}
// Display error message if an error occurs during password reset.
else if (showError)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

// Reset password form using EditForm component for validation.
<EditForm Model="@resetPasswordModel" OnValidSubmit="HandleResetPassword">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="newPassword">New Password</label>
        <InputText id="newPassword" type="password" class="form-control" @bind-Value="resetPasswordModel.NewPassword" />
    </div>

    <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="resetPasswordModel.ConfirmPassword" />
    </div>

    <button type="submit" class="btn btn-primary">Reset Password</button>
</EditForm>

@code {
    private ResetPasswordModel resetPasswordModel = new ResetPasswordModel(); // Initialize reset password model
    private bool showSuccess = false; // Flag to track password reset success
    private bool showError = false; // Flag to track password reset error
    private string errorMessage = string.Empty; // Error message for password reset

    [Parameter]
    public string? Token { get; set; } // Token parameter for password reset

    // Method to handle password reset submission.
    private async Task HandleResetPassword()
    {
        // Verify the password reset token
        var user = await _context.Users.FirstOrDefaultAsync(u => u.PasswordResetToken == Token && u.PasswordResetTokenExpiration > DateTime.UtcNow.AddMinutes(-5));
        if (user != null)
        {
            // Reset the user's password
            string hashedPassword = BCrypt.HashPassword(resetPasswordModel.NewPassword); // Hash the new password
            user.PasswordHash = hashedPassword;
            user.PasswordResetToken = null;
            user.PasswordResetTokenExpiration = null;
            await _context.SaveChangesAsync(); // Save changes to the database

            showSuccess = true; // Update showSuccess flag
            showError = false; // Reset showError flag

            // Redirect to the login page after successful password reset
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            showSuccess = false; // Reset showSuccess flag
            showError = true; // Update showError flag
            errorMessage = "Invalid or expired password reset token. Please request a new password reset."; // Set error message
        }
    }

    // Model representing reset password data with validation attributes.
    public class ResetPasswordModel
    {
        [Required(ErrorMessage = "New password is required.")]
        [StringLength(8, ErrorMessage = "New password must be at least 8 characters long.")]
        public string? NewPassword { get; set; } // New password field

        [Required(ErrorMessage = "Confirm password is required.")]
        [Compare("NewPassword", ErrorMessage = "Passwords do not match.")]
        public string? ConfirmPassword { get; set; } // Confirm password field
    }
}
